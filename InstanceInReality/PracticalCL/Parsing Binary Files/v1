# 解析二进制文件 库

In this chapter I’ll show you how to build a library that you can use to write code for reading
and writing binary files. 


As these examples show, the main intellectual challenge—such as it is—of reading and
writing primitive elements of binary files is understanding how exactly to interpret the bytes
that appear in a file and to map them to Lisp data types. If a binary file format is well specified,
this should be a straightforward proposition. Actually writing functions to read and write a
particular encoding is, as they say, a simple matter of programming.
Now you can turn to the issue of reading and writing more complex on-disk structures and
how to map them to Lisp objects.

## Composite Structures
Since binary formats are usually used to represent data in a way that makes it easy to map to in-
memory data structures, it should come as no surprise that composite on-disk structures are
usually defined in ways similar to the way programming languages define in-memory structures.
Usually a composite on-disk structure will consist of a number of named parts, each of which
is itself either a primitive type such as a number or a string, another composite structure, or
possibly a collection of such values.

For instance, an ID3 tag defined in the 2.2 version of the specification consists of a header
made up of a three-character ISO-8859-1 string, which is always “ID3”; two one-byte unsigned
integers that specify the major version and revision of the specification; eight bits worth of
boolean flags; and four bytes that encode the size of the tag in an encoding particular to the ID3
specification. Following the header is a list of frames, each of which has its own internal structure.
After the frames are as many null bytes as are necessary to pad the tag out to the size specified
in the header.
If you look at the world through the lens of object orientation, composite structures look a
lot like classes. For instance, you could write a class to represent an ID3 tag.
(defclass id3-tag ()
    ((identifier :initarg :identifier :accessor identifier)
    (major-version :initarg :major-version :accessor major-version)
    (revision :initarg :revision :accessor revision)
    (flags :initarg :flags :accessor flags)
    (size :initarg :size :accessor size)
    (frames :initarg :frames :accessor frames)))

An instance of this class would make a perfect repository to hold the data needed to represent
an ID3 tag. You could then write functions to read and write instances of this class. For example,
assuming the existence of certain other functions for reading the appropriate primitive data
types, a read-id3-tag function might look like this:
(defun read-id3-tag (in)
  (let ((tag (make-instance 'id3-tag)))
    (with-slots (identifier major-version revision flags size frames) tag
      (setf identifier (read-iso-8859-1-string in :length 3))
      (setf major-version (read-u1 in))
      (setf revision (read-u1 in))
      (setf flags (read-u1 in))
      (setf size (read-id3-encoded-size in))
      (setf frames (read-id3-frames in :tag-size size)))
    tag))


What you’d really like is a way to describe the structure of something like an ID3 tag in a
form that’s as compressed as the specification’s pseudocode yet that can also be expanded into
code that defines the id3-tag class and the functions that translate between bytes on disk and
instances of the class. Sounds like a job for a macro.
磁盘上字节 与 类实例 之间的转换

Some information isn’t captured by this pseudocode. For instance, exactly how the four
bytes that encode the size are to be interpreted is described in a few lines of prose. Likewise, the
spec describes in prose how the frame and subsequent padding is stored after this header. But
most of what you need to know to be able to write code to read and write an ID3 tag is specified
by this pseudocode. Thus, you ought to be able to write an s-expression version of this pseudocode
and have it expanded into the class and function definitions you’d otherwise have to write by
hand—something, perhaps, like this:
(define-binary-class id3-tag
    ((file-identifier (iso-8859-1-string :length 3))
    (major-version u1)
    (revision u1)
    (flags u1)
    (size id3-tag-size)
    (frames (id3-frames :tag-size size))))

The basic idea is that this form defines a class id3-tag similar to the way you could with
DEFCLASS , but instead of specifying things such as :initarg and :accessors, each slot 
specification consists of the name of the slot—file-identifier, major-version, and so on—and
information about how that slot is represented on disk. Since this is just a bit of fantasizing, you
don’t have to worry about exactly how the macro define-binary-class will know what to do
with expressions such as (iso-8859-1-string :length 3), u1, id3-tag-size, and (id3-frames
:tag-size size); as long as each expression contains the information necessary to know how
to read and write a particular data encoding, you should be okay.

## Making the Dream a Reality
Okay, enough fantasizing about good-looking code; now you need to get to work writing
define-binary-class —— writing the code that will turn that concise expression of what an ID3
tag looks like into code that can represent one in memory, read one off disk, and write it back out.
