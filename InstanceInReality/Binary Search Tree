# 4.7 示例：二叉搜索树 (Example: Binary Search Tree)

由于 sort 系统本身就有了，极少需要在 Common Lisp 里编写排序程序。
本节将演示如何解决一个与此相关的问题，这个问题尚未有现成的解决方案：维护一个已排序的对象集合。
本节的代码会把对象存在二叉搜索树里（ binary search tree ）或称作 BST。
当二叉搜索树平衡时，允许我们可以在与时间成 log n 比例的时间内，来寻找、添加或是删除元素，其中 n 是集合的大小。

1 一棵二叉搜索树指的是，如何表示？
一棵二叉搜索树可以是 nil 或是一个左子、右子树都是二叉搜索树的节点。


(defstruct (node (:print-function
                  (lambda (n s d)
                    (format s "#<~A>" (node-elt n)))))
  elt (l nil) (r nil))

;; 此处nil 是 l r 的初始值
;;
(defstruct point
  (x 0)
  (y 0)
  )
;;

(defun bst-insert (obj bst <)
  (if (null bst)
      (make-node :elt obj)
      (let ((elt (node-elt bst)))
        (if (eql obj elt)
            bst
            (if (funcall < obj elt)
                (make-node
                   :elt elt
                   :l (bst-insert obj (node-l bst) <) ; lisp中的 ( 是方法的调用提示
                   :r (node-r bst))
                (make-node
                   :elt elt
                   :r (bst-insert obj (node-r bst) <)
                   :l (node-l bst)))))))

; lisp中的 ( 是方法的调用提示                  
; 注意: < 是变量名，它的实际值是 #'<
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                   
;; 构造树
> (setf nums nil)
NIL
> (dolist (x '(5 8 4 2 1 9 6 7 3))
    (setf nums (bst-insert x nums #'<)))
NIL

;; 分析树的构造过程 (不一定准确，只是为了便于理解)
最开始树是 ()
insert 5: (5 () ())
insert 8: (5 () (8 () ()))
insert 4: (5 (4 () ()) (8 () ()))
insert 2: (5 (4 (2 () ()) ()) (8 () ()))
insert 1: (5 (4 (2 (1 () ()) ()) ()) (8 () ()))
insert 9: (5 (4 (2 (1 () ()) ()) ()) (8 () (9 () ())))
......
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun bst-find (obj bst <)
  (if (null bst)
      nil
      (let ((elt (node-elt bst)))
        (if (eql obj elt)
            bst
            (if (funcall < obj elt)
                (bst-find obj (node-l bst) <)
                (bst-find obj (node-r bst) <))))))

(defun bst-min (bst)
  (and bst
       (or (bst-min (node-l bst)) bst)))

(defun bst-max (bst)
  (and bst
       (or (bst-max (node-r bst)) bst)))

;; 相比于二叉搜索树的构建，查找要简单的多;
;; lisp 中的假 是 nil; 0 却是 真;
;; and 在寻找 假(返回遇到的第一个假); or 在寻找 真(返回遇到的第一个真)
;; 和 cons 函数一样， bst-insert 不改动做为第二个实参所传入的二叉搜索树。

要找到二叉搜索树的最小及最大的元素是很简单的。要找到最小的，我们沿着左子树的路径走，如同 bst-min 所做的。
要找到最大的，沿着右子树的路径走，如同 bst-max 所做的：
> (bst-min nums)
#<1>
> (bst-max nums)
#<9>



;; TODO 移除元素
要从二叉搜索树里移除元素一样很快，但需要更多代码。

;;
;;
;;
;;
;;
;;
;;
;;
;;
;;


;; 二叉搜索树：遍历
(defun bst-traverse (fn bst)
  (when bst
    (bst-traverse fn (node-l bst))
    (funcall fn (node-elt bst))
    (bst-traverse fn (node-r bst))))

一旦我们把一个对象集合插入至二叉搜索树时，中序遍历会将它们由小至大排序。这是 bst-traverse 函数的用途：

> (bst-traverse #'princ nums)
13456789
NIL
（函数 princ 仅显示单一对象）


;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
本节所给出的代码，提供了一个二叉搜索树实现的脚手架。你可能想根据应用需求，来充实这个脚手架。
举例来说，这里所给出的代码每个节点只有一个 elt 字段；在许多应用里，有两个字段会更有意义， key 与 value 。
本章的这个版本把二叉搜索树视为集合看待，从这个角度看，重复的插入是被忽略的。但是代码可以很简单地改动，来处理重复的元素。

二叉搜索树不仅是维护一个已排序对象的集合的方法。他们是否是最好的方法，取决于你的应用。
一般来说，二叉搜索树最适合用在插入与删除是均匀分布的情况。

??? 未见实例
有一件二叉搜索树不擅长的事，就是用来维护优先队列（priority queues）。在一个优先队列里，插入也许是均匀分布的，但移除总是在一个另一端。
这会导致一个二叉搜索树变得不平衡，而我们期望的复杂度是 O(log(n)) 插入与移除操作，将会变成 O(n) 。
如果用二叉搜索树来表示一个优先队列，也可以使用一般的列表，因为二叉搜索树最终会作用的像是个列表。

;;
;;
;; 理解毛主席所说的 一般性与特殊性 以及 具体情况具体讨论！
;;
;;
