# build-in

+
-
*
/
abs
sqrt

1.3 THREE KINDS OF NUMBERS
integers
floating point numbers
Ratios(分数)

  denominator: the number below the line in a fraction

1.5 SYMBOLS
Symbols are another type of data in Lisp. 
symbol: Any sequence of letters, digits, and permissible special characters that is not a number.


1.6 THE SPECIAL SYMBOLS T AND NIL

Two Lisp symbols have special meanings attached to them. They are:
T Truth, ‘‘yes’’
NIL Falsity, emptiness, "no"

More importantly, certain Lisp functions answer questions with T or NIL. Such
yes-or-no functions are called predicates.


1.7 SOME SIMPLE PREDICATES
NUMBERP
the SYMBOLP predicate tests whether its input is a symbol.
The ZEROP, EVENP, and ODDP predicates work only on numbers.
<
>

1.8 THE EQUAL PREDICATE

Common Lisp also includes predicates named EQ, EQL, and EQUALP whose
behavior is slightly different than EQUAL;

1.9 PUTTING FUNCTIONS TOGETHER

So far we’ve covered about a dozen of the many functions built into Common
Lisp. These built-in functions are called primitive functions, or primitives.
We make new functions by putting primitives together in various ways.

1.9.1 Defining ADD1
Our ADD1 function will take a single number as input, and add one to it.
(defun add1 (n)
  (+ 1 n)
)

1.9.2 Defining ADD2
(defun add2 (n)
  (add1 (add1 n))
)
But in Lisp there is always more than one way to solve a problem; 
sometimes it is interesting to look at alternative solutions. 

But if we look inside the ADD2 box we can see exactly what’s going on.
The number 5 flows into the first ADD1 box, which produces 6 as its result.
The 6 then flows into the second ADD1 box, and its result is 7.

If we want to peer deeper still, we could see the + box inside each ADD1 box.

1.10 THE NOT PREDICATE

By convention, NIL is the only way to say no in Lisp. Everything else is
treated as yes. So NOT returns NIL for every input except NIL.

This is not just an arbitrary convention. It turns out to be extremely useful to
treat NIL as the only ‘‘false’’ object. You’ll see why in later chapters.

1.11 NEGATING A PREDICATE

1.12 NUMBER OF INPUTS TO A FUNCTION


1.13 ERRORS
Learning to recognize errors is an important part of programming. You
will undoubtedly get lots of practice in this art, since few computer programs
are ever written correctly the first time.


