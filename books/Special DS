# 《ANSI Common Lisp》
chapter4 特殊数据结构

在之前的章节里，我们讨论了列表，Lisp 最多功能的数据结构。
本章将演示如何使用 Lisp 其它的数据结构：数组（包含向量与字符串），结构以及哈希表。
它们或许不像列表这么灵活，但存取速度更快并使用了更少空间。

Common Lisp 还有另一种数据结构：实例（instance）。实例将在 11 章讨论，讲述 CLOS。

## 4.1 数组 (Array)
在 Common Lisp 里，你可以调用 make-array 来构造一个数组，第一个实参为一个指定数组维度的列表。要构造一个 2 x 3 的数组，我们可以：
> (setf arr (make-array '(2 3) :initial-element nil))
#<Simple-Array T (2 3) BFC4FE>

用 aref 取出数组内的元素。与 Common Lisp 的存取函数一样， aref 是零索引的（zero-indexed）：
> (aref arr 0 0)
NIL

要替换数组的某个元素，我们使用 setf 与 aref ：
> (setf (aref arr 0 0) 'b)
B
> (aref arr 0 0)
B

要表示字面常量的数组（literal array），使用 #na 语法，其中 n 是数组的维度。举例来说，我们可以这样表示 arr 这个数组：
#2a((b nil nil) (nil nil nil))


如果我们只想要一维的数组，你可以给 make-array 第一个实参传一个整数，而不是一个列表：
> (setf vec (make-array 4 :initial-element nil))
#(NIL NIL NIL NIL)
一维数组又称为向量（vector）。你可以通过调用 vector 来一步骤构造及填满向量，向量的元素可以是任何类型：

> (vector "a" 'b 3)
#("a" b 3)

可以用 aref 来存取向量，但有一个更快的函数叫做 svref ，专门用来存取向量。

> (svref vec 0)
NIL
在 svref 内的 “sv” 代表“简单向量”（“simple vector”），所有的向量缺省是简单向量。


## 4.2 示例：二叉搜索 (Example: Binary Search)
作为一个示例，这小节演示如何写一个在排序好的向量里搜索对象的函数。如果我们知道一个向量是排序好的，
我们可以比（65页） find 做的更好， find 必须依序检查每一个元素。我们可以直接跳到向量中间开始找。
如果中间的元素是我们要找的对象，搜索完毕。要不然我们持续往左半部或往右半部搜索，取决于对象是小于或大于中间的元素。



如果我们插入下面这行至 finder 的起始处：

(format t "~A~%" (subseq vec start (+ end 1)))
我们可以观察被搜索的元素的数量，是每一步往左减半的：

> (bin-search 3 #(0 1 2 3 4 5 6 7 8 9))
#(0 1 2 3 4 5 6 7 8 9)
#(0 1 2 3)
#(3)
3


## 4.3 字符与字符串 (Strings and Characters)
字符串是字符组成的向量。我们用一系列由双引号包住的字符，来表示一个字符串常量，而字符 c 用 #\c 表示。

每个字符都有一个相关的整数 ── 通常是 ASCII 码，但不一定是。在多数的 Lisp 实现里，
函数 char-code 返回与字符相关的数字，而 code-char 返回与数字相关的字符。

字符比较函数 char< （小于）， char<= （小于等于)， char= （等于)， char>= （大于等于) ， 
char> （大于)，以及 char/= （不同)。他们的工作方式和 146 页（译注 9.3 节)比较数字用的操作符一样。
> (sort "elbow" #'char<)
"below"

由于字符串是字符向量，序列与数组的函数都可以用在字符串。你可以用 aref 来取出元素，举例来说，
> (aref "abc" 1)
#\b

但针对字符串可以使用更快的 char 函数：
> (char "abc" 1)
#\b


可以使用 setf 搭配 char （或 aref ）来替换字符串的元素：
> (let ((str (copy-seq "Merlin")))
   (setf (char str 3) #\k)
   str)
   
如果你想要比较两个字符串，你可以使用通用的 equal 函数，但还有一个比较函数，是忽略字母大小写的 string-equal ：
> (equal "fred" "fred")
T
> (equal "fred" "Fred")
NIL
>(string-equal "fred" "Fred")
T
Common Lisp 提供大量的操控、比较字符串的函数。收录在附录 D，从 364 页开始。


有许多方式可以创建字符串。最普遍的方式是使用 format 。将第一个参数设为 nil 来调用 format ，
使它返回一个原本会印出来的字符串：
> (format nil "~A or ~A" "truth" "dare")
"truth or dare"

但若你只想把数个字符串连结起来，你可以使用 concatenate ，它接受一个特定类型的符号，加上一个或多个序列：
> (concatenate 'string "not " "to worry")
"not to worry"


## 4.4 序列 (Sequences)
在 Common Lisp 里，序列类型包含了列表与向量（因此也包含了字符串）。有些用在列表的函数，实际上是序列函数，
包括 remove 、 length 、 subseq 、 reverse 、 sort 、 every 以及 some 。
所以 46 页（译注 3.11 小节的 mirror? 函数）我们所写的函数，也可以用在其他种类的序列上：
> (mirror? "abba")
T


我们已经看过四种用来取出序列元素的函数： 给列表使用的 nth ， 给向量使用的 aref 及 svref ，以及给字符串使用的 char 。 
Common Lisp 也提供了通用的 elt ，对任何种类的序列都有效：
> (elt '(a b c) 1)
B
针对特定类型的序列，特定的存取函数会比较快，所以使用 elt 是没有意义的，除非在代码当中，有需要支持通用序列的地方。

使用 elt ，我们可以写一个针对向量来说更有效率的 mirror? 版本：

(defun mirror? (s)
  (let ((len (length s)))
    (and (evenp len)
         (do ((forward 0 (+ forward 1))
              (back (- len 1) (- back 1)))
             ((or (> forward back)
                  (not (eql (elt s forward)
                            (elt s back))))
              (> forward back))))))

;; ??????????????????????????????????????????????????????????????????????
这个版本也可用在列表，但这个实现更适合给向量使用。频繁的对列表调用 elt 的代价是昂贵的，因为列表仅允许顺序存取。
而向量允许随机存取，从任何元素来存取每一个元素都是廉价的。
;; ??????????????????????????????????????????????????????????????????????


许多序列函数接受一个或多个，由下表所列的标准关键字参数：

参数	用途	缺省值
:key	应用至每个元素的函数	identity
:test	作来比较的函数	eql
:from-end	若为真，反向工作。	nil
:start	起始位置	0
:end	若有给定，结束位置。	nil
一个接受所有关键字参数的函数是 position ，返回序列中一个元素的位置，未找到元素时则返回 nil 。
我们使用 position 来演示关键字参数所扮演的角色。

> (position #\a "fantasia")
1
> (position #\a "fantasia" :start 3 :end 5)
4

如果我们给入 :from-end 关键字参数，

> (position #\a "fantasia" :from-end t)
7
我们得到最靠近结尾的 a 的位置。但位置是像平常那样计算；而不是从尾端算回来的距离。

:key 关键字参数是序列中每个元素在被考虑之前，应用至元素上的函数。如果我们说，
> (position 'a '((c d) (a b)) :key #'car)
1
那么我们要找的是，元素的 car 部分是符号 a 的第一个元素。

:test 关键字参数接受需要两个实参的函数，并定义了怎样是一个成功的匹配。缺省函数为 eql 。
如果你想要匹配一个列表，你也许想使用 equal 来取代：
> (position '(a b) '((a b) (c d)))
NIL
> (position '(a b) '((a b) (c d)) :test #'equal)
0
:test 关键字参数可以是任何接受两个实参的函数。举例来说，给定 < ，我们可以询问第一个使第一个参数比它小的元素位置：
> (position 3 '(1 0 7 5) :test #'<)
2


使用 subseq 与 position ，我们可以写出分开序列的函数。举例来说，这个函数
(defun second-word (str)
  (let ((p1 (+ (position #\  str) 1)))
    (subseq str p1 (position #\  str :start p1))))
返回字符串中第一个单字空格后的第二个单字：

> (second-word "Form follows function")
"follows"


要找到满足谓词的元素，其中谓词接受一个实参，我们使用 position-if 。它接受一个函数与序列，并返回第一个满足此函数的元素：
> (position-if #'oddp '(2 3 4 5))
1
position-if 接受除了 :test 之外的所有关键字参数。

有许多相似的函数，如给序列使用的 member 与 member-if 。
分别是， find （接受全部关键字参数）与 find-if （接受除了 :test 之外的所有关键字参数）：

> (find #\a "cat")
#\a

> (find-if #'characterp "ham")
#\h
不同于 member 与 member-if ，它们仅返回要寻找的对象。

通常一个 find-if 的调用，如果解读为 find 搭配一个 :key 关键字参数的话，会显得更清楚。举例来说，表达式

(find-if #'(lambda (x)
             (eql (car x) 'complete))
         lst)
可以更好的解读为
(find 'complete lst :key #'car)


函数 remove （22 页）以及 remove-if 通常都可以用在序列。它们跟 find 与 find-if 是一样的关系。
另一个相关的函数是 remove-duplicates ，仅保留序列中每个元素的最后一次出现。
> (remove-duplicates "abracadabra")
"cdbra"
这个函数接受前表所列的所有关键字参数。


函数 reduce 用来把序列压缩成一个值。它至少接受两个参数，一个函数与序列。函数必须是接受两个实参的函数。
在最简单的情况下，一开始函数用序列前两个元素作为实参来调用，之后接续的元素作为下次调用的第二个实参，
而上次返回的值作为下次调用的第一个实参。最后调用最终返回的值作为 reduce 整个函数的返回值。也就是说像是这样的表达式：

(reduce #'fn '(a b c d))
等同于

(fn (fn (fn 'a 'b) 'c) 'd)
我们可以使用 reduce 来扩充只接受两个参数的函数。举例来说，要得到三个或多个列表的交集(intersection)，我们可以：

> (reduce #'intersection '((b r a d 's) (b a d) (c a t)))
(A)


## 4.5 示例：解析日期 (Example: Parsing Dates)
作为序列操作的示例，本节演示了如何写程序来解析日期。我们将编写一个程序，可以接受像是 “16 Aug 1980” 的字符串，
然后返回一个表示日、月、年的整数列表。

(defun tokens (str test start)
  (let ((p1 (position-if test str :start start)))
    (if p1
        (let ((p2 (position-if #'(lambda (c)
                                   (not (funcall test c)))
                               str :start p1)))
          (cons (subseq str p1 p2)
                (if p2
                    (tokens str test p2)
                    nil)))
        nil)))

(defun constituent (c)
  (and (graphic-char-p c)
       (not (char= c #\ ))))
图 4.2 辨别符号 (token)

图 4.2 里包含了某些在这个应用里所需的通用解析函数。第一个函数 tokens ，用来从字符串中取出语元 （token）。
给定一个字符串及测试函数，满足测试函数的字符组成子字符串，子字符串再组成列表返回。
举例来说，如果测试函数是对字母返回真的 alpha-char-p 函数，我们得到：

> (tokens "ab12 3cde.f" #'alpha-char-p 0)
("ab" "cde" "f")
所有不满足此函数的字符被视为空白 ── 他们是语元的分隔符，但永远不是语元的一部分。

函数 constituent 被定义成用来作为 tokens 的实参。

在 Common Lisp 里，图形字符是我们可见的字符，加上空白字符。所以如果我们用 constituent 作为测试函数时，

> (tokens "ab12 3cde.f gh" #'constituent 0)
("ab12" "3cde.f" "gh")
则语元将会由空白区分出来。

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 释疑
(defun constituent (c)
  (and (graphic-char-p c)
       (not (char= c #\ ))))
  ;; c 是 图形字符，而且not 空白字符
  ;; #\b 与'b  的区别是什么?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
































