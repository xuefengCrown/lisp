# Variables

Common Lisp supports two kinds of variables: lexical and dynamic. (词法 动态)
These two types correspond roughly to “local” and “global” variables in other languages. 
However, the correspondence is only approximate.
相当于，也只是相当也。这种对应只是近似的。
词法变量 && 动态变量
局部变量 && 全局变量

## Variables Basics 
As in other languages, in Common Lisp variables are named places that can hold a value. However,
in Common Lisp, variables aren’t typed the way they are in languages such as Java or C++. That
is, you don’t need to declare the type of object that each variable can hold. Instead, a variable
can hold values of any type and the values carry type information that can be used to check
types at runtime. Thus, Common Lisp is dynamically typed—type errors are detected dynami-
cally. For instance, if you pass something other than a number to the  + function, Common Lisp
will signal a type error. On the other hand, Common Lisp is a strongly typed language in the
sense that all type errors will be detected—there’s no way to treat an object as an instance of a
class that it’s not.

### 概念上来讲，CL中的值都是 对象的引用。
All values in Common Lisp are, conceptually at least, references to objects. 

As an optimization certain kinds of objects, such as integers below a certain size and characters,
may be represented directly in memory where other objects would be represented by a pointer to
the actual object. However, since integers and characters are immutable, it doesn’t matter that
there may be multiple copies of “the same” object in different variables. This is the root of the
difference between  EQ and  EQL discussed in Chapter 4.


(defun foo (x)
  (format t "Parameter: ~a~%" x)
  (let ((x 2))
    (format t "Outer LET: ~a~%" x)
    (let ((x 3))
      (format t "Inner LET: ~a~%" x))
    (format t "Outer LET: ~a~%" x))
  (format t "Parameter: ~a~%" x))

Another binding form is a variant of  LET ,  LET* . The difference is that in a  LET , the variable
names can be used only in the body of the  LET —the part of the  LET after the variables list—but
in a  LET* , the initial value forms for each variable can refer to variables introduced earlier in the
variables list. Thus, you can write the following:
(let* ((x 10)
       (y (+ x 10)))
  (list x y))
but not this:
(let ((x 10)
      (y (+ x 10)))
  (list x y))
However, you could achieve the same result with nested  LET s.
(let ((x 10))
  (let ((y (+ x 10)))
    (list x y)))

## Lexical Variables and Closures
By default all binding forms in Common Lisp introduce lexically scoped variables. Lexically
scoped variables can be referred to only by code that’s textually within the binding form.
Lexical scoping should be familiar to anyone who has programmed in Java, C, Perl, or Python
since they all provide lexically scoped “local” variables.
默认情况下，CL中所有的绑定形式都将引入词法作用域变量！
绑定形式???: 
函数形参？
let (形式体内的最后一个表达式的值作为let表达式的值返回)
The scope of function parameters and  LET variables—the area of the program where the
variable name can be used to refer to the variable’s binding—is delimited(界定) by the form that
introduces the variable. This form—the function definition or the  LET —is called the binding
form. As you’ll see in a bit, the two types of variables—lexical and dynamic—use two slightly
different scoping mechanisms, but in both cases the scope is delimited by the binding form.

(let ((count 0)) #'(lambda () (setf count (1+ count))))
the reference to count inside the  LAMBDA form should be legal according to the rules of lexical
scoping. Yet the anonymous function containing the reference will be returned as the value of
the  LET form and can be invoked, via  FUNCALL , by code that’s not in the scope of the  LET . So
what happens? As it turns out, when count is a lexical variable, it just works. The binding of
count created when the flow of control entered the  LET form will stick around for as long as
needed, in this case for as long as someone holds onto a reference to the function object
returned by the  LET form. The anonymous function is called a closure because it “closes over”
the binding created by the  LET.


The key thing to understand about closures is that it’s the binding, not the value of the
variable, that’s captured. Thus, a closure can not only access the value of the variables it closes
over but can also assign new values that will persist between calls to the closure. For instance,
you can capture the closure created by the previous expression in a global variable like this:
(defparameter *fn* (let ((count 0)) #'(lambda () (setf count (1+ count)))))
Then each time you invoke it, the value of count will increase by one.
CL-USER> (funcall *fn*)
1
CL-USER> (funcall *fn*)
2
CL-USER> (funcall *fn*)
3

A single closure can close over many variable bindings simply by referring to them. Or
multiple closures can capture the same binding. For instance, the following expression returns
a list of three closures, one that increments the value of the closed over count binding, one that
decrements it, and one that returns the current value:
(let ((count 0))
  (list
    #'(lambda () (incf count))
    #'(lambda () (decf count))
    #'(lambda () count)))


## Dynamic, a.k.a. Special, Variables
Lexically scoped bindings help keep code understandable by limiting the scope, literally, in
which a given name has meaning. This is why most modern languages use lexical scoping for
local variables. Sometimes, however, you really want a global variable—a variable that you can
refer to from anywhere in your program. While it’s true that indiscriminate use of global variables
can turn code into spaghetti nearly as quickly as unrestrained use of goto, global variables do
have legitimate uses and exist in one form or another in almost every programming language. 7
And as you’ll see in a moment, Lisp’s version of global variables, dynamic variables, are both
more useful and more manageable.

7. Java disguises global variables as public static fields, C uses extern variables, and Python’s
module-level and Perl’s package-level variables can likewise be accessed from anywhere.

全局变量
Common Lisp provides two ways to create global variables:  DEFVAR and  DEFPARAMETER 

(defvar *count* 0
  "Count of widgets made so far.")
(defparameter *gap-tolerance* 0.001
  "Tolerance to be allowed in widget gaps.")

The advantage of global variables is that you don’t have to pass them around. 
全局变量的优势在于，不必到处传递它们。
Most languages store the standard input and output streams in global variables for exactly this reason—you
never know when you’re going to want to print something to standard out, and you don’t want
every function to have to accept and pass on arguments containing those streams just in case
someone further down the line needs them.

However, once a value, such as the standard output stream, is stored in a global variable
and you have written code that references that global variable, it’s tempting to try to temporarily
modify the behavior of that code by changing the variable’s value.
For instance, suppose you’re working on a program that contains some low-level logging
functions that print to the stream in the global variable *standard-output*. Now suppose that
in part of the program you want to capture all the output generated by those functions into a
file. You might open a file and assign the resulting stream to *standard-output*. Now the low-
level functions will send their output to the file.

This works fine until you forget to set *standard-output* back to the original stream when
you’re done. If you forget to reset *standard-output*, all the other code in the program that
uses *standard-output* will also send its output to the file. 9

9. The strategy of temporarily reassigning *standard-output* also breaks if the system is
multithreaded—if there are multiple threads of control trying to print to different streams at
the same time, they’ll all try to set the global variable to the stream they want to use, stomping
all over each other. You could use a lock to control access to the global variable, but then you’re
not really getting the benefit of multiple concurrent threads, since whatever thread is printing
has to lock out all the other threads until it’s done even if they want to print to a different stream.


What you really want, it seems, is a way to wrap a piece of code in something that says,
“All code below here—all the functions it calls, all the functions they call, and so on, down to
the lowest-level functions—should use this value for the global variable *standard-output*.”
Then when the high-level function returns, the old value of *standard-output* should be auto-
matically restored.
It turns out that that’s exactly what Common Lisp’s other kind of variable—dynamic vari-
ables—let you do. When you bind a dynamic variable—for example, with a  LET variable or a
function parameter—the binding that’s created on entry to the binding form replaces the
global binding for the duration of the binding form. Unlike a lexical binding, which can be
referenced by code only within the lexical scope of the binding form, a dynamic binding can be
referenced by any code that’s invoked during the execution of the binding form. 10 And it turns
out that all global variables are, in fact, dynamic variables.
Thus, if you want to temporarily redefine *standard-output*, the way to do it is simply to
rebind it, say, with a  LET .
(let ((*standard-output* *some-other-stream*))
  (stuff))

In any code that runs as a result of the call to stuff, references to *standard-output* will
use the binding established by the  LET . And when stuff returns and control leaves the  LET , the
new binding of *standard-output* will go away and subsequent references to *standard-output*
will see the binding that was current before the  LET . At any given time, the most recently estab-
lished binding shadows all other bindings. Conceptually, each new binding for a given dynamic
variable is pushed onto a stack of bindings for that variable, and references to the variable
always use the most recent binding. As binding forms return, the bindings they created are
popped off the stack, exposing previous bindings.11

11. Though the standard doesn’t specify how to incorporate multithreading into Common Lisp,
implementations that provide multithreading follow the practice established on the Lisp
machines and create dynamic bindings on a per-thread basis. A reference to a global variable
will find the binding most recently established in the current thread, or the global binding.

A simple example shows how this works.
(defvar *x* 10)
(defun foo () (format t "X: ~d~%" *x*))
The  DEFVAR creates a global binding for the variable *x* with the value 10. The reference to
*x* in foo will look up the current binding dynamically. If you call foo from the top level, the
global binding created by the  DEFVAR is the only binding available, so it prints 10.
CL-USER> (foo)
X: 10
NIL
But you can use  LET to create a new binding that temporarily shadows the global binding,
and foo will print a different value.
CL-USER> (let ((*x* 20)) (foo))
X: 20
NIL
Now call foo again, with no  LET , and it again sees the global binding.
CL-USER> (foo)
X: 10
NIL

Now define another function.
(defun bar ()
  (foo)
  (let ((*x* 20)) (foo))
  (foo))
Note that the middle call to foo is wrapped in a  LET that binds *x* to the new value 20.
When you run bar, you get this result:
CL-USER> (bar)
X: 10
X: 20
X: 10
NIL

As you can see, the first call to foo sees the global binding, with its value of 10. The middle
call, however, sees the new binding, with the value 20. But after the  LET , foo once again sees the
global binding.
As with lexical bindings, assigning a new value affects only the current binding. To see this,
you can redefine foo to include an assignment to *x*.
(defun foo ()
  (format t "Before assignment~18tX: ~d~%" *x*)
  (setf *x* (+ 1 *x*))
  (format t "After assignment~18tX: ~d~%" *x*))
  
Now foo prints the value of *x*, increments it, and prints it again. If you just run foo, you’ll
see this:
CL-USER> (foo)
Before assignment X: 10
After assignment X: 11
NIL
Not too surprising. Now run bar.
CL-USER> (bar)
Before assignment X: 11
After assignment X: 12
Before assignment X: 20
After assignment X: 21
Before assignment X: 12
After assignment X: 13
NIL
Notice that *x* started at 11—the earlier call to foo really did change the global value. The
first call to foo from bar increments the global binding to 12. The middle call doesn’t see the
global binding because of the  LET . Then the last call can see the global binding again and incre-
ments it from 12 to 13.

??? Dynamic bindings
Dynamic bindings make global variables much more manageable, but it’s important to
notice they still allow action at a distance. Binding a global variable has two at a distance
effects—it can change the behavior of downstream code, and it also opens the possibility that
downstream code will assign a new value to a binding established higher up on the stack. You
should use dynamic variables only when you need to take advantage of one or both of these
characteristics.
改变下游代码的行为；
使得下游代码可以为栈的上一级所建立的绑定赋予一个新值。

## Constants 
All constants are global and are defined with  DEFCONSTANT . The basic form of  DEFCONSTANT is like
DEFPARAMETER.
(defconstant name initial-value-form [ documentation-string ])

命名约定
+constant-name+


## Assignment
Once you’ve created a binding, you can do two things with it: get the current value and set it to
a new value. As you saw in Chapter 4, a symbol evaluates to the value of the variable it names,
so you can get the current value simply by referring to the variable. To assign a new value to a
binding, you use the  SETF macro, Common Lisp’s general-purpose assignment operator. The
basic form of  SETF is as follows:
(setf place value)

SETF can also assign to multiple places in sequence. For instance, instead of the following:
(setf x 1)
(setf y 2)
you can write this:
(setf x 1 y 2)
SETF returns the newly assigned value, so you can also nest calls to  SETF as in the following
expression, which assigns both x and y the same random value:
(setf x (setf y (random 10)))


## Generalized Assignment

Variable bindings, of course, aren’t the only places that can hold values. Common Lisp supports
composite data structures（组合数据结构） such as arrays, hash tables, and lists, as well as user-defined data
structures, all of which consist of multiple places that can each hold a value.
I’ll cover those data structures in future chapters, but while we’re on the topic of assign-
ment, you should note that  SETF can assign any place a value. As I cover the different composite
data structures, I’ll point out which functions can serve as “ SETF able places.” The short version,
however, is if you need to assign a value to a place,  SETF is almost certainly the tool to use.
It’s even possible to extend  SETF to allow it to assign to user-defined places though I won’t
cover that. 16
In this regard  SETF is no different from the = assignment operator in most C-derived
languages. In those languages, the = operator assigns new values to variables, array elements,
and fields of classes. In languages such as Perl and Python that support hash tables as a built-in
data type, = can also set the values of individual hash table entries. Table 6-1 summarizes the
various ways = is used in those languages.

Assigning to...     Java, C, C++              Perl            Python
...variable          x = 10;                  $x = 10;        x = 10
...array element     a[0] = 10;               $a[0] = 10;     a[0] = 10
...hash table entry                       $hash{'key'} = 10; hash['key'] = 10
...field in object o.field = 10;          $o->{'field'} = 10; o.field = 10

Perl 和 Pytho支持哈希表（hash table）作为内置数据类型（built-in）

SETF works the same way—the first “argument” to  SETF is a place to store the value, and
the second argument provides the value. As with the = operator in these languages, you use the
same form to express the place as you’d normally use to fetch the value. 17 Thus, the Lisp equiv-
alents of the assignments in Table 6-1—given that  AREF is the array access function,  GETHASH
does a hash table lookup, and field might be a function that accesses a slot named field of a
user-defined object—are as follows:

Simple variable: (setf x 10)
Array:           (setf (aref a 0) 10)
Hash table:      (setf (gethash 'key hash) 10)
Slot named 'field': (setf (field o) 10)

Note that  SETF ing a place that’s part of a larger object has the same semantics as  SETF ing
a variable: the place is modified without any effect on the object that was previously stored in
the place. Again, this is similar to how  = behaves in Java, Perl, and Python. 18

## Other Ways to Modify Places
(incf x) ≡ (setf x (+ x 1))
(decf x) ≡ (setf x (- x 1))
(incf x 10)  ≡ (setf x (+ x 10))

The main benefit of modify macros is that they’re more concise than the
same modification written out using  SETF . Additionally, modify macros are defined in a way
that makes them safe to use with places where the place expression must be evaluated only
once. A silly example is this expression, which increments the value of an arbitrary element of
an array:
(incf (aref *array* (random (length *array*))))
A naive translation of that into a  SETF expression might look like this:
(setf (aref *array* (random (length *array*)))
  (1+ (aref *array* (random (length *array*)))))
However, that doesn’t work because the two calls to  RANDOM won’t necessarily return the
same value—this expression will likely grab the value of one element of the array, increment it,
and then store it back as the new value of a different element. The  INCF expression, however,
does the right thing because it knows how to take apart this expression:
(aref *array* (random (length *array*)))
to pull out the parts that could possibly have side effects to make sure they’re evaluated only
once. In this case, it would probably expand into something more or less equivalent to this:
(let ((tmp (random (length *array*))))
  (setf (aref *array* tmp) (1+ (aref *array* tmp))))
In general, modify macros are guaranteed to evaluate both their arguments and the subforms
of the place form exactly once each, in left-to-right order.

The macro  PUSH , which you used in the mini-database to add elements to the *db* variable, is
another modify macro. You’ll take a closer look at how it and its counterparts  POP and  PUSHNEW
work in Chapter 12 when I talk about how lists are represented in Lisp.


Finally, two slightly esoteric but useful modify macros are  ROTATEF and  SHIFTF .  ROTATEF
rotates values between places. For instance, if you have two variables, a and b, this call:
(rotatef a b)
swaps the values of the two variables and returns  NIL . Since a and b are variables and you don’t
have to worry about side effects, the previous  ROTATEF expression is equivalent to this:
(let ((tmp a)) (setf a b b tmp) nil)

With other kinds of places, the equivalent expression using  SETF would be quite a bit more
complex.
SHIFTF is similar except instead of rotating values it shifts them to the left—the last argu-
ment provides a value that’s moved to the second-to-last argument while the rest of the values
are moved one to the left. The original value of the first argument is simply returned. Thus, the
following:
(shiftf a b 10)
is equivalent—again, since you don’t have to worry about side effects—to this:
(let ((tmp a)) (setf a b b 10) tmp)
Both  ROTATEF and  SHIFTF can be used with any number of arguments and, like all modify
macros, are guaranteed to evaluate them exactly once, in left to right order.













