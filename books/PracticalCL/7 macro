# Macros: Standard Control Constructs

So let’s start our discussion of Lisp’s macros by taking a step back and looking at various ways
languages support extensibility.
All programmers should be used to the idea that the definition of a language can include
a standard library of functionality that’s implemented in terms of the “core” language—
functionality that could have been implemented by any programmer on top of the language if
it hadn’t been defined as part of the standard library. C’s standard library, for instance, can be
implemented almost entirely in portable C. Similarly, most of the ever-growing set of classes
and interfaces that ship with Java’s standard Java Development Kit (JDK) are written in
“pure” Java.

核心 + 标准库
带来的丰富的表现力
One advantage of defining languages in terms of a core plus a standard library is it makes
them easier to understand and implement. But the real benefit is in terms of expressiveness—
since much of what you think of as “the language” is really just a library—the language is easy
to extend. If C doesn’t have a function to do some thing or another that you need, you can write
that function, and now you have a slightly richer version of C. Similarly, in a language such as
Java or Smalltalk where almost all the interesting parts of the “language” are defined in terms
of classes, by defining new classes you extend the language, making it more suited for writing
programs to do whatever it is you’re trying to do.
（易于扩展）语言扩展方式：
C——新函数
Java——新类
Lisp——除此还有 宏

While Common Lisp supports both these methods of extending the language, macros give
Common Lisp yet another way. As I discussed briefly in Chapter 4, each macro defines its own
syntax, determining how the s-expressions it’s passed are turned into Lisp forms. With macros
as part of the core language it’s possible to build new syntax—control constructs such as  WHEN ,
DOLIST , and  LOOP as well as definitional forms such as  DEFUN and  DEFPARAMETER —as part of
the “standard library” rather than having to hardwire（硬编码） them into the core. This has implications
for how the language itself is implemented, but as a Lisp programmer you’ll care more that it
gives you another way to extend the language, making it a better language for expressing solutions
to your particular programming problems.

宏——一种词法抽象
But for some reason a lot of folks who haven’t actually used Lisp macros—
folks who think nothing of spending their days creating new functional abstractions or defining
hierarchies of classes to solve their programming problems—get spooked by the idea of being
able to define new syntactic abstractions. 

These are some of the things that, if Lisp didn’t have macros, would have to be built into the language core. 
## WHEN and UNLESS

(if condition then-form [else-form])

However,  IF isn’t actually such a great syntactic construct because the then-form and
else-form are each restricted to being a single Lisp form. This means if you want to perform a
sequence of actions in either clause, you need to wrap them in some other syntax. For instance,
suppose in the middle of a spam-filtering program you wanted to both file a message as spam
and update the spam database when a message is spam. You can’t write this:
(if (spam-p current-message)
    (file-in-spam-folder current-message)
    (update-spam-database current-message))

because the call to update-spam-database will be treated as the else clause, not as part of the
then clause. Another special operator,  PROGN , executes any number of forms in order and
returns the value of the last form. So you could get the desired behavior by writing the following:
(if (spam-p current-message)
    (progn
      (file-in-spam-folder current-message)
      (update-spam-database current-message)))

In this case, Common Lisp comes with a standard macro,  WHEN , which lets you write this:
(when (spam-p current-message)
  (file-in-spam-folder current-message)
  (update-spam-database current-message))
  
But if it wasn’t built into the standard library, you could define  WHEN yourself with a macro
such as this, using the backquote notation I discussed in Chapter 3: 3
(defmacro when (condition &rest body)
  `(if ,condition (progn ,@body)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CL-USER> (macroexpand-1 '(when (spam-p current-message)
                               (file-in-spam-folder current-message)
                               (update-spam-database current-message)))
(IF (SPAM-P CURRENT-MESSAGE)
    (PROGN
     (FILE-IN-SPAM-FOLDER CURRENT-MESSAGE)
     (UPDATE-SPAM-DATABASE CURRENT-MESSAGE)))
T
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CL-USER> (macroexpand-1 '(where :title "Give Us a Break" :ripped t))
#'(LAMBDA (CD)
    (AND (EQUAL (GETF CD :TITLE) "Give Us a Break")
         (EQUAL (GETF CD :RIPPED) T)))
T
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

A counterpart to the  WHEN macro is  UNLESS , which reverses the condition, evaluating its
body forms only if the condition is false. In other words:
(defmacro unless (condition &rest body)
  `(if (not ,condition) (progn ,@body)))
Admittedly, these are pretty trivial macros. There’s no deep black magic here; they just
abstract away a few language-level bookkeeping details, allowing you to express your true intent（意图）
a bit more clearly. But their very triviality makes an important point: because the macro system
is built right into the language, you can write trivial macros like  WHEN and  UNLESS that give you
small but real gains in clarity that are then multiplied by the thousands of times you use them.
In Chapters 24, 26, and 31 you’ll see how macros can also be used on a larger scale, creating
whole domain-specific（特定领域） embedded languages.（嵌入语言） But first let’s finish our discussion of the standard
control-construct macros.

## COND
(if a
  (do-x)
  (if b
    (do-y)
    (do-z)))
    
(cond (a (do-x))
      (b (do-y))
      (t (do-z)))
and the value of the last form in the branch is returned as the value of the  COND as a whole. 

## AND, OR, and NOT

## Looping

At the bottom (leaving aside the special operators) is a very general looping construct,  DO .
While very powerful,  DO suffers, as do many general-purpose abstractions, from being overkill
for simple situations. So Lisp also provides two other macros,  DOLIST and  DOTIMES , that are
less flexible than  DO but provide convenient support for the common cases of looping over the
elements of a list and counting loops.

## DOLIST and DOTIMES
DOLIST is similar to Perl’s foreach or Python’s for. Java added a similar kind of loop construct
with the “enhanced” for loop in Java 1.5, as part of JSR-201. 
Notice what a difference macros make. A Lisp programmer who notices a common pattern in their code 
can write a macro to give themselves a source-level abstraction of that pattern. 
A Java programmer who notices the same pattern has to convince Sun that this particular abstraction 
is worth adding to the language.
Then Sun has to publish a JSR and convene an industry-wide “expert group” to hash everything
out. That process—according to Sun—takes an average of 18 months. After that, the compiler
writers all have to go upgrade their compilers to support the new feature. And even once the Java
programmer’s favorite compiler supports the new version of Java, they probably still can’t use the
new feature until they’re allowed to break source compatibility with older versions of Java. So an
annoyance that Common Lisp programmers can resolve for themselves within five minutes plagues
Java programmers for years.

If you want to break out of a  DOLIST loop before the end of the list, you can use  RETURN .
CL-USER> (dolist (x '(1 2 3)) (print x) (if (evenp x) (return)))
1
2
NIL


DOTIMES is the high-level looping construct for counting loops. The basic template is
much the same as  DOLIST ’s.
(dotimes (var count-form)
  body-form*)
The count-form must evaluate to an integer. Each time through the loop var holds successive
integers from 0 to one less than that number. For instance:
CL-USER> (dotimes (i 4) (print i))
0
1
2
3
NIL
As with  DOLIST , you can use  RETURN to break out of the loop early.

## DO
While  DOLIST and  DOTIMES are convenient and easy to use, they aren’t flexible enough to use
for all loops. For instance, what if you want to step multiple variables in parallel? Or use an arbi-
trary expression to test for the end of the loop? If neither  DOLIST nor  DOTIMES meet your needs,
you still have access to the more general  DO loop.
Where  DOLIST and  DOTIMES provide only one loop variable,  DO lets you bind any number
of variables and gives you complete control over how they change on each step through the
loop. You also get to define the test that determines when to end the loop and can provide a
form to evaluate at the end of the loop to generate a return value for the  DO expression as a
whole. The basic template looks like this:
(do (variable-definition*)
  (end-test-form result-form*)
   statement*)
Each variable-definition introduces a variable that will be in scope in the body of the loop.
The full form of a single variable definition is a list containing three elements.
(var init-form step-form)

The init-form will be evaluated at the beginning of the loop and the resulting values bound
to the variable var. Before each subsequent（随后的） iteration of the loop, the step-form will be evaluated
and the new value assigned to var. The step-form is optional; if it’s left out, the variable will
keep its value from iteration to iteration unless you explicitly（明确地） assign it a new value in the loop
body. As with the variable definitions in a  LET , if the init-form is left out, the variable is bound
to  NIL . Also as with  LET , you can use a plain variable name as shorthand for a list containing
just the name.
At the beginning of each iteration, after all the loop variables have been given their new
values, the end-test-form is evaluated. As long as it evaluates to  NIL , the iteration proceeds,
evaluating the statements in order.

When the end-test-form evaluates to true, the result-forms are evaluated, and the value of
the last result form is returned as the value of the  DO expression.
At each step of the iteration the step forms for all the variables are evaluated before assigning
any of the values to the variables. This means you can refer to any of the other loop variables in
the step forms. 6 That is, in a loop like this:
每次迭代之前，所有变量的步长形式都会先求值，然后赋值给相应变量。这意味着，你可以在步长形式中引用其他
任何循变量。
(do ((n 0 (1+ n))
     (cur 0 next)
     (next 1 (+ cur next)))
    ((= 10 n) cur))

This example also illustrates another characteristic of  DO — — because you can step multiple
variables, you often don’t need a body at all. Other times, you may leave out the result form,
particularly if you’re just using the loop as a control construct. This flexibility, however, is the
reason that  DO expressions can be a bit cryptic.（晦涩难懂的） Where exactly do all the parentheses go? The
best way to understand a  DO expression is to keep in mind the basic template.
(do (variable-definition*)
  (end-test-form result-form*)
  statement*)

The six parentheses in that template are the only ones required by the  DO itself. You need
one pair to enclose the variable declarations, one pair to enclose the end test and result forms,
and one pair to enclose the whole expression. Other forms within the  DO may require their own
parentheses—variable definitions are usually lists, for instance. And the test form is often a
function call. 

Finally, the next loop demonstrates a  DO loop that binds no variables. It loops while the
current time is less than the value of a global variable, printing “Waiting” once a minute. Note
that even with no loop variables, you still need the empty variables list.
(do ()
    ((> (get-universal-time) *some-future-date*))
   (format t "Waiting~%")
   (sleep 60))
















