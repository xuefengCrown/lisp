# Syntax and Semantics
语法 和 语义

The evaluator then defines a syntax of Lisp forms that can be built out of s-expressions.

This split of the black box has a couple of consequences. One is that you can use s-expressions,
as you saw in Chapter 3, as an externalizable data format for data other than source code, using
READ to read it and  PRINT to print it. 
The other consequence is that since the semantics of the
language are defined in terms of trees of objects rather than strings of characters, it’s easier to
generate code within the language than it would be if you had to generate code as text. Gener-
ating code completely from scratch is only marginally easier—building up lists vs. building up
strings is about the same amount of work. The real win, however, is that you can generate code
by manipulating existing data. This is the basis for Lisp’s macros, which I’ll discuss in much
more detail in future chapters. For now I’ll focus on the two levels of syntax defined by
Common Lisp: the syntax of s-expressions understood by the reader and the syntax of Lisp
forms understood by the evaluator.

## S-expressions
The basic elements of s-expressions are lists and atoms. Lists are delimited by parentheses and
can contain any number of whitespace-separated elements. Atoms are everything else.
The elements of lists are themselves s-expressions (in other words, atoms or nested lists). 

目前的关键是，理解如何用数字，字符串，符号借助括号所组成的列表来构建S-表达式，以表示任意的树状对象。

## S-expressions As Lisp Forms
Common Lisp’s evaluation rule defines a second
level of syntax that determines which s-expressions can be treated as Lisp forms. 9 The syntactic
rules at this level are quite simple. Any atom—any nonlist or the empty list—is a legal Lisp form
as is any list that has a symbol as its first element. 

The simplest Lisp forms, atoms, can be divided into two categories: symbols and every-
thing else. A symbol, evaluated as a form, is considered the name of a variable and evaluates to
the current value of the variable.

All other atoms—numbers and strings are the kinds you’ve seen so far—are self-evaluating
objects. This means when such an expression is passed to the notional evaluation function, it’s
simply returned. 

It’s also possible for symbols to be self-evaluating in the sense that the variables they name
can be assigned the value of the symbol itself. Two important constants that are defined this
way are  T and  NIL , the canonical true and false values. I’ll discuss their role as booleans in the
section “Truth, Falsehood, and Equality.”
Another class of self-evaluating symbols are the keyword symbols—symbols whose names
start with :. When the reader interns such a name, it automatically defines a constant variable
with the name and with the symbol as the value.

Things get more interesting when we consider how lists are evaluated. All legal list forms
start with a symbol, but three kinds of list forms are evaluated in three quite different ways. To
determine what kind of form a given list is, the evaluator must determine whether the symbol
that starts the list is the name of a function, a macro, or a special operator. If the symbol hasn’t
been defined yet—as may be the case if you’re compiling code that contains references to
functions that will be defined later—it’s assumed to be a function name. 12 I’ll refer to the three
kinds of forms as function call forms, macro forms, and special forms.

## Function Calls
In other words, the basic syntax of a function
call form is as follows, where each of the arguments is itself a Lisp form:
(function-name argument*)

A more complex expression such as the following is evaluated in similar fashion except
that evaluating the arguments (+ 1 2) and (- 3 4) entails first evaluating their arguments and
applying the appropriate functions to them:
(* (+ 1 2) (- 3 4))
Eventually, the values 3 and –1 are passed to the  * function, which returns –3.
As these examples show, functions are used for many of the things that require special
syntax in other languages. This helps keep Lisp’s syntax regular.

## Special Operators






